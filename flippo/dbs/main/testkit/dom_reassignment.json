{
  "uri": "xo.58753544223475875324",
  "aux": "testkit",
  "kind": "js",
  "name": "reassign elements to export",
  "media": "\n        lain.rom.testkit_reassign = (dom_new) => {\n\n            const dom_current_map = new Map();       \n            // Populate the map and check for duplicates\n            document.querySelectorAll('[data-set]').forEach(element => {\n                const dataSetValue = element.getAttribute('data-set');\n                if (dom_current_map.has(dataSetValue)) {\n                    // If duplicate, remove the existing element from the DOM\n                    const existingElement = dom_current_map.get(dataSetValue);\n                    existingElement.parentElement.removeChild(existingElement);\n                }\n                dom_current_map.set(dataSetValue, element);\n            });\n            console.log(\"reassigning... to:\", dom_new, \"from:\", dom_current_map); \n            // Set to track data-set values in dom_new for comparison\n            const newDataSets = new Set(dom_new.map(elementInfo => elementInfo.attributes['data-set']));\n        \n            // Proceed with the comparison and reassignment\n            dom_new.forEach(elementInfo => {\n                const entry_domset_value = elementInfo.attributes['data-set'];\n                const element = dom_current_map.get(entry_domset_value); //element is live match\n                if (element) {\n                    // Update the attributes of the matched element to match those in dom_new\n                    Object.entries(elementInfo.attributes).forEach(([attrName, attrValue]) => {\n                        if (attrName !== 'data-step') {\n                            element.setAttribute(attrName, attrValue);\n                        }\n                    });\n                    \n                    Object.entries(elementInfo.misc).forEach(([attrName, attrValue]) => {\n                        element.style[attrName] = attrValue;\n                    });\n                    if (element.style.display === 'none' && element.style.pointerEvents === 'none') {\n                        const dataSet = parseInt(entry_domset_value, 10);\n                        const cacheIndex = lain.cache.findIndex(item => item.domset === dataSet);\n                        if (cacheIndex !== -1) {\n                            lain.cache[cacheIndex].hidden = true;\n                        }\n                    }\n                    // Clear processed entries from current map\n                    dom_current_map.delete(entry_domset_value);\n        \n                    const parentElement = element.parentElement;\n        \n                    if (parentElement.tagName.toLowerCase() === 'body') {\n                        // Check if the body has any child elements\n                        if (parentElement.firstChild) {\n                            parentElement.insertBefore(element, parentElement.firstChild);\n                        } else {\n                            parentElement.appendChild(element);\n                        }\n                    } else {\n                        parentElement.appendChild(element);\n                    }\n                }\n            });\n        \n            // Destroy elements not present in dom_new\n            dom_current_map.forEach((element, domset) => {\n                if (!newDataSets.has(domset)) {\n                    console.log(newDataSets, domset, element)\n                    //element.parentElement.removeChild(element);\n                    var dataSet = parseInt(domset, 10);\n                    var cacheIndex = lain.cache.findIndex(function(item) { return item.domset === dataSet; });\n                    if (cacheIndex !== -1) {   \n                        lain.rom.removeCacheItem({ index: cacheIndex });\n                    } else if (element.parentElement) {\n                        element.parentElement.removeChild(element);\n                    }\n\n                    // remove cache item but what is the index?\n                }\n            });\n        \n            console.log(\"dom reassigned\");\n        };\n        "
}