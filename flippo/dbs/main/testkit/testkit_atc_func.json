{
  "uri": "xo.13905760624562462",
  "aux": "testkit",
  "kind": "js",
  "name": "testkit atc applet",
  "media": "\n        lain.rom.testkit_atc = (action = 'init_and_callback') => {\n            if (action === 'init_and_callback' || action === 'init') {\n                const stringArray = [\"/quest/ testkit cli (type & send 'help')\", \"(っ◔◡◔)っ✩･ﾟ✧*･ﾟ･✶･ﾟ･ﾟ*･ﾟ･✶･ﾟ\"];\n                stringArray.forEach(item => {\n                    commandFeed.insertAdjacentHTML('beforeend', '<li>' + item + '</li>');\n                });\n            }\n            if (action === 'callback') {\n                commandFeed.insertAdjacentHTML('beforeend', '<li><b><i>' + lain.sign + '></i></b> ' + qomms_entry.value + '</li>');\n                scrollCli.scrollTop = scrollCli.scrollHeight;\n                setTimeout(() => { qomms_entry.value = ''; }, 0);\n            }\n        };\n\n            const commandFeed = document.getElementById(\"qomms\");\n            const scrollCli = document.getElementById('testkit_atc');\n        lain.rom.testkit_atc('init_and_callback');\n\n       \n        testkit_atc_mode.addEventListener('change', function() {\n            if (this.value === 'server') {\n                atc_inputarea.innerHTML = '<form onsubmit=\"alice.rom.testkit_atc(\\'callback\\')\" hx-post=\"https://star.xomud.quest/quest/command/\" hx-trigger=\"submit\" hx-target=\"#qomms\" hx-swap=\"beforeend\"><input type = \"text\" name = \"set-message\" id = \"qomms_entry\" placeholder = \"/quest/...\"><input type = \"submit\" value = \"send\"></form>';\n                htmx.process(atc_inputarea);\n            }\n            if (this.value === 'client') {\n                atc_inputarea.innerHTML = '<form id=\"testkit_atc_client\" ><input type = \"text\" id=\"qomms_entry\" placeholder = \">...\"><input type=\"submit\" value=\"eval\"></form>';\n                testkit_atc_client.addEventListener('submit', function() {\n                    event.preventDefault();\n                    if (confirm(\"ATC requests permission to execute a command!\")){\n                        commandFeed.insertAdjacentHTML('beforeend', '<li>' + qomms_entry.value + '</li>');\n                        try {\n                            const result = eval(qomms_entry.value);\n                            const resultString = typeof result === 'object' ? JSON.stringify(result, null, 2) : result;\n                            commandFeed.insertAdjacentHTML('beforeend', '<li><i>' + resultString + '</i></li>');\n                        } catch (error) {\n                            commandFeed.insertAdjacentHTML('beforeend', '<li><i>' + error + '</i></li>');\n                        }\n                        qomms_entry.value = '';\n                    }\n                })\n            }\n\n        });\n        testkit_atc_mode.dispatchEvent(new Event('change'));\n        // client side template handling\n\n        const atc_templates = {\n            'atc_temp_channel': (element) => {\n                element.innerHTML = lain.chan;\n            },\n            'atc_temp_portal': (element) => {\n                element.innerHTML = lain.portal;\n            },\n            'atc_temp_aux': (element) => {\n                element.innerHTML = document.querySelector('meta[portal][aux]').getAttribute('aux');\n            },\n        };\n\n        const observer = new MutationObserver((mutations) => {\n            mutations.forEach((mutation) => {\n                if (mutation.type === 'childList' && mutation.addedNodes.length > 0) {\n                    // Check the last list item in the <ul>\n                    scrollCli.scrollTop = scrollCli.scrollHeight;\n                    const lastListItem = commandFeed.lastElementChild;\n                    if (lastListItem) {\n                        Object.keys(atc_templates).forEach((templateId) => {\n                            const templateElement = lastListItem.querySelector('#' + templateId);\n                            if (templateElement) {\n                                atc_templates[templateId](templateElement);\n                    }\n                });\n                };\n            };\n            });\n        });\n        observer.observe(commandFeed, { childList: true, });\n        "
}